#!/usr/bin/env python3
"""
Script para teste com m√∫ltiplas notas CSV e OpenAI
"""

import pandas as pd
import os
import sys
from pathlib import Path
from datetime import datetime
import tempfile

# Adicionar src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def criar_csv_exemplo_multiplas_notas():
    """Cria um CSV de exemplo com m√∫ltiplas notas fiscais"""
    
    # Dados de exemplo para m√∫ltiplas notas
    dados_notas = [
        # Nota 1 - Consulta m√©dica
        {
            'numero_nota': '000001',
            'serie': '1',
            'data_emissao': '2024-01-15',
            'cnpj_emitente': '12345678000199',
            'razao_social_emitente': 'CLINICA MEDICA EXEMPLO LTDA',
            'cnpj_destinatario': '98765432000188',
            'razao_social_destinatario': 'JOAO SILVA',
            'codigo_produto': 'CONS001',
            'descricao': 'Consulta m√©dica pedi√°trica',
            'ncm': '85149000',
            'cfop': '5102',
            'unidade': 'UN',
            'quantidade': 1.0,
            'valor_unitario': 150.00,
            'valor_total': 150.00
        },
        
        # Nota 2 - Medicamento
        {
            'numero_nota': '000002',
            'serie': '1',
            'data_emissao': '2024-01-16',
            'cnpj_emitente': '11111111000111',
            'razao_social_emitente': 'FARMACIA CENTRAL LTDA',
            'cnpj_destinatario': '98765432000188',
            'razao_social_destinatario': 'JOAO SILVA',
            'codigo_produto': 'MED001',
            'descricao': 'Paracetamol 500mg - 20 comprimidos',
            'ncm': '30049099',
            'cfop': '5102',
            'unidade': 'UN',
            'quantidade': 2.0,
            'valor_unitario': 25.50,
            'valor_total': 51.00
        },
        
        # Nota 3 - Produto eletr√¥nico (suspeito)
        {
            'numero_nota': '000003',
            'serie': '1',
            'data_emissao': '2024-01-17',
            'cnpj_emitente': '22222222000222',
            'razao_social_emitente': 'ELETRONICOS BRASIL LTDA',
            'cnpj_destinatario': '33333333000333',
            'razao_social_destinatario': 'LOJA TECNOLOGIA LTDA',
            'codigo_produto': 'ELEC001',
            'descricao': 'Smartphone Samsung Galaxy S24',
            'ncm': '85171200',
            'cfop': '1102',
            'unidade': 'UN',
            'quantidade': 1.0,
            'valor_unitario': 500.00,  # Valor suspeitamente baixo
            'valor_total': 500.00
        },
        
        # Nota 4 - Produto com NCM incorreto
        {
            'numero_nota': '000004',
            'serie': '1',
            'data_emissao': '2024-01-18',
            'cnpj_emitente': '44444444000444',
            'razao_social_emitente': 'INDUSTRIA TEXTIL LTDA',
            'cnpj_destinatario': '55555555000555',
            'razao_social_destinatario': 'LOJA ROUPAS LTDA',
            'codigo_produto': 'TEXT001',
            'descricao': 'Camiseta de algod√£o masculina',
            'ncm': '12345678',  # NCM incorreto (deveria ser 61091000)
            'cfop': '1102',
            'unidade': 'UN',
            'quantidade': 10.0,
            'valor_unitario': 35.00,
            'valor_total': 350.00
        },
        
        # Nota 5 - Servi√ßo de consultoria
        {
            'numero_nota': '000005',
            'serie': '1',
            'data_emissao': '2024-01-19',
            'cnpj_emitente': '66666666000666',
            'razao_social_emitente': 'CONSULTORIA EMPRESARIAL LTDA',
            'cnpj_destinatario': '77777777000777',
            'razao_social_destinatario': 'EMPRESA CLIENTE LTDA',
            'codigo_produto': 'CONS002',
            'descricao': 'Consultoria em gest√£o empresarial - 20 horas',
            'ncm': '00000000',  # Servi√ßo
            'cfop': '5102',
            'unidade': 'H',
            'quantidade': 20.0,
            'valor_unitario': 200.00,
            'valor_total': 4000.00
        }
    ]
    
    # Criar DataFrame
    df = pd.DataFrame(dados_notas)
    
    # Salvar CSV
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"multiplas_notas_exemplo_{timestamp}.csv"
    filepath = Path(__file__).parent / filename
    
    df.to_csv(filepath, index=False, encoding='utf-8')
    
    print(f"‚úÖ CSV criado: {filepath}")
    print(f"üìä Total de notas: {len(dados_notas)}")
    print(f"üìã Colunas: {list(df.columns)}")
    
    return filepath

def verificar_configuracao_openai():
    """Verifica se a configura√ß√£o do OpenAI est√° correta"""
    
    print("üîç Verificando configura√ß√£o do OpenAI...")
    
    # Verificar vari√°vel de ambiente
    openai_key = os.getenv('OPENAI_API_KEY')
    if not openai_key:
        print("‚ùå OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
        print("üí° Configure com: export OPENAI_API_KEY='sua_chave_aqui'")
        return False
    
    if openai_key.startswith('sk-'):
        print("‚úÖ OPENAI_API_KEY encontrada e parece v√°lida")
        return True
    else:
        print("‚ö†Ô∏è OPENAI_API_KEY encontrada mas formato pode estar incorreto")
        return False

def testar_modelo_openai():
    """Testa se o modelo OpenAI est√° funcionando"""
    
    print("üß™ Testando modelo OpenAI...")
    
    try:
        from src.utils.model_manager import get_model_manager
        
        model_manager = get_model_manager()
        
        # Testar GPT-4o Mini
        print("üì° Testando GPT-4o Mini...")
        llm = model_manager.get_llm("gpt-4o-mini")
        
        # Teste simples
        response = llm.invoke("Responda em uma frase: Qual √© a capital do Brasil?")
        print(f"‚úÖ Resposta GPT-4o Mini: {response}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar OpenAI: {e}")
        return False

def criar_instrucoes_teste():
    """Cria instru√ß√µes para o teste"""
    
    print("\n" + "="*60)
    print("üß™ INSTRU√á√ïES PARA TESTE COM M√öLTIPLAS NOTAS CSV + OPENAI")
    print("="*60)
    
    print("""
üìã PREPARA√á√ÉO:
1. ‚úÖ CSV de exemplo criado com 5 notas fiscais
2. ‚úÖ Configura√ß√£o OpenAI verificada
3. ‚úÖ Modelo OpenAI testado

üöÄ COMO EXECUTAR O TESTE:

1. üì§ UPLOAD DO CSV:
   - Acesse a interface Streamlit
   - V√° para "üì§ Analisar NF-e"
   - Selecione "üìä CSV (Dados Fiscais)"
   - Fa√ßa upload do arquivo CSV criado

2. ü§ñ CONFIGURAR MODELO:
   - No sidebar, selecione "‚òÅÔ∏è API Externa (OpenAI/Anthropic/Google)"
   - Escolha "GPT-4o Mini (OpenAI)" ou "GPT-4o (OpenAI)"

3. üîç EXECUTAR AN√ÅLISE:
   - Clique em "üöÄ Executar CSV!"
   - Aguarde o processamento das 5 notas

4. üìä VERIFICAR RESULTADOS:
   - Dashboard com m√©tricas consolidadas
   - An√°lises individuais de cada agente
   - Detec√ß√£o de fraudes (se houver)
   - Chat com assistente IA

üéØ O QUE ESPERAR:
- ‚úÖ Processamento de 5 notas fiscais diferentes
- ‚úÖ Classifica√ß√£o NCM autom√°tica
- ‚úÖ Detec√ß√£o de poss√≠veis fraudes
- ‚úÖ Respostas de alta qualidade do OpenAI
- ‚úÖ Relat√≥rio consolidado

‚ö†Ô∏è POSS√çVEIS FRAUDES DETECTADAS:
- Nota 3: Smartphone com valor suspeitamente baixo
- Nota 4: NCM incorreto para camiseta
""")

def main():
    """Fun√ß√£o principal"""
    
    print("üöÄ PREPARANDO TESTE COM M√öLTIPLAS NOTAS CSV + OPENAI")
    print("="*60)
    
    # 1. Criar CSV de exemplo
    print("\n1Ô∏è‚É£ Criando CSV de exemplo...")
    csv_file = criar_csv_exemplo_multiplas_notas()
    
    # 2. Verificar configura√ß√£o OpenAI
    print("\n2Ô∏è‚É£ Verificando configura√ß√£o OpenAI...")
    openai_ok = verificar_configuracao_openai()
    
    # 3. Testar modelo OpenAI
    if openai_ok:
        print("\n3Ô∏è‚É£ Testando modelo OpenAI...")
        modelo_ok = testar_modelo_openai()
    else:
        modelo_ok = False
    
    # 4. Mostrar instru√ß√µes
    criar_instrucoes_teste()
    
    # 5. Resumo final
    print("\n" + "="*60)
    print("üìä RESUMO DA PREPARA√á√ÉO")
    print("="*60)
    print(f"‚úÖ CSV criado: {csv_file.name}")
    print(f"‚úÖ OpenAI configurado: {'Sim' if openai_ok else 'N√£o'}")
    print(f"‚úÖ Modelo testado: {'Sim' if modelo_ok else 'N√£o'}")
    
    if openai_ok and modelo_ok:
        print("\nüéâ TUDO PRONTO PARA O TESTE!")
        print("üí° Execute: streamlit run FiscalAI_MVP/ui/app.py")
    else:
        print("\n‚ö†Ô∏è CONFIGURE O OPENAI ANTES DE CONTINUAR")
        print("üí° Configure: export OPENAI_API_KEY='sua_chave_aqui'")

if __name__ == "__main__":
    main()
