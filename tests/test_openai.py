#!/usr/bin/env python3
"""
Teste da aplica√ß√£o OldNews-FiscalAI com OpenAI API
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_openai_connection():
    """Testa conex√£o com OpenAI"""
    print("üîç Testando conex√£o com OpenAI...")
    
    try:
        from openai import OpenAI
        
        # Configurar cliente OpenAI
        client = OpenAI(api_key="YOUR_OPENAI_API_KEY_HERE")
        
        # Testar conex√£o com uma pergunta simples
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": "Ol√°! Responda apenas 'Conex√£o OK' se voc√™ recebeu esta mensagem."}
            ],
            max_tokens=10
        )
        
        print(f"‚úÖ Resposta da OpenAI: {response.choices[0].message.content}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o com OpenAI: {e}")
        return False

def test_agents_with_openai():
    """Testa agentes com OpenAI"""
    print("\nüîç Testando agentes com OpenAI...")
    
    try:
        from src.agents.agente1_extrator import Agente1Extrator
        from src.agents.agente2_classificador import Agente2Classificador
        from src.agents.agente3_validador import Agente3Validador
        from src.agents.agente4_orquestrador import Agente4Orquestrador
        from langchain.llms import OpenAI
        
        # Configurar OpenAI
        os.environ["OPENAI_API_KEY"] = "YOUR_OPENAI_API_KEY_HERE"
        
        # Criar LLM OpenAI
        llm = OpenAI(model="gpt-3.5-turbo", temperature=0.1)
        
        # Criar agentes
        extrator = Agente1Extrator()
        classificador = Agente2Classificador(llm)
        validador = Agente3Validador(llm)
        orquestrador = Agente4Orquestrador(llm)
        
        print("‚úÖ Agente1Extrator criado com sucesso")
        print("‚úÖ Agente2Classificador criado com OpenAI")
        print("‚úÖ Agente3Validador criado com OpenAI")
        print("‚úÖ Agente4Orquestrador criado com OpenAI")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o dos agentes com OpenAI: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_xml_processing_with_openai():
    """Testa processamento de XML com OpenAI"""
    print("\nüîç Testando processamento de XML com OpenAI...")
    
    try:
        from src.utils.universal_xml_parser import parse_fiscal_xml
        from src.agents.agente2_classificador import Agente2Classificador
        from src.agents.agente3_validador import Agente3Validador
        from langchain.llms import OpenAI
        
        # Configurar OpenAI
        os.environ["OPENAI_API_KEY"] = "YOUR_OPENAI_API_KEY_HERE"
        
        # Criar LLM OpenAI
        llm = OpenAI(model="gpt-3.5-turbo", temperature=0.1)
        
        # Verificar se h√° arquivos XML de exemplo
        xml_files = []
        for root, dirs, files in os.walk("data/samples"):
            for file in files:
                if file.endswith('.xml'):
                    xml_files.append(os.path.join(root, file))
        
        if xml_files:
            print(f"‚úÖ Encontrados {len(xml_files)} arquivos XML de exemplo")
            
            # Testar parsing de um arquivo
            xml_file = xml_files[0]
            print(f"üîç Processando arquivo: {xml_file}")
            
            # Parsear XML
            nfe, status, message = parse_fiscal_xml(xml_file)
            print(f"‚úÖ XML parseado - Status: {status}")
            print(f"‚úÖ XML parseado - Message: {message}")
            
            if nfe:
                print(f"‚úÖ NFe extra√≠da - Chave: {nfe.chave_acesso[:20]}...")
                print(f"‚úÖ NFe extra√≠da - Emitente: {nfe.razao_social_emitente}")
                print(f"‚úÖ NFe extra√≠da - Valor: R$ {nfe.valor_total}")
                print(f"‚úÖ NFe extra√≠da - Itens: {len(nfe.itens)}")
                
                # Testar classifica√ß√£o com OpenAI
                if nfe.itens:
                    print("\nüîç Testando classifica√ß√£o de NCM com OpenAI...")
                    classificador = Agente2Classificador(llm)
                    
                    # Classificar todos os itens
                    print(f"üì¶ Itens para classificar: {len(nfe.itens)}")
                    for i, item in enumerate(nfe.itens):
                        print(f"  {i+1}. {item.descricao} (NCM: {item.ncm_declarado})")
                    
                    # Executar classifica√ß√£o
                    resultado_classificacao = classificador.executar(nfe.itens)
                    print(f"‚úÖ Classifica√ß√£o executada: {len(resultado_classificacao)} itens classificados")
                
                # Testar valida√ß√£o com OpenAI
                print("\nüîç Testando valida√ß√£o com OpenAI...")
                validador = Agente3Validador(llm)
                
                # Executar valida√ß√£o (precisa das classifica√ß√µes)
                resultado_validacao = validador.executar(nfe, resultado_classificacao)
                print(f"‚úÖ Valida√ß√£o executada: {type(resultado_validacao).__name__}")
                if hasattr(resultado_validacao, 'fraudes_detectadas'):
                    print(f"‚úÖ Fraudes detectadas: {len(resultado_validacao.fraudes_detectadas)}")
                
        else:
            print("‚ö†Ô∏è Nenhum arquivo XML de exemplo encontrado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no processamento de XML com OpenAI: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_streamlit_with_openai():
    """Testa aplica√ß√£o Streamlit com OpenAI"""
    print("\nüîç Testando aplica√ß√£o Streamlit com OpenAI...")
    
    try:
        # Configurar OpenAI
        os.environ["OPENAI_API_KEY"] = "YOUR_OPENAI_API_KEY_HERE"
        
        # Testar importa√ß√£o do app
        import ui.app
        print("‚úÖ Aplica√ß√£o Streamlit importada com sucesso")
        
        # Verificar se as fun√ß√µes principais existem
        from ui.app import pagina_dashboard, pagina_upload, pagina_config
        print("‚úÖ Fun√ß√µes principais do app encontradas")
        
        # Verificar configura√ß√£o de APIs
        print("‚úÖ Fun√ß√£o de configura√ß√£o de APIs verificada")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na aplica√ß√£o Streamlit com OpenAI: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ Testando aplica√ß√£o OldNews-FiscalAI com OpenAI")
    print("=" * 60)
    
    success = True
    
    # Teste 1: Conex√£o OpenAI
    if not test_openai_connection():
        success = False
    
    # Teste 2: Agentes com OpenAI
    if not test_agents_with_openai():
        success = False
    
    # Teste 3: Processamento XML com OpenAI
    if not test_xml_processing_with_openai():
        success = False
    
    # Teste 4: Streamlit com OpenAI
    if not test_streamlit_with_openai():
        success = False
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ Todos os testes com OpenAI passaram!")
        print("‚úÖ A aplica√ß√£o est√° pronta para uso com OpenAI API")
    else:
        print("‚ùå Alguns testes com OpenAI falharam.")
        print("‚ö†Ô∏è Verifique a configura√ß√£o da API e tente novamente")
    
    return success

if __name__ == "__main__":
    main()
