"""
Agente5Interface V2 - Acesso direto aos dados dos arquivos
Vers√£o melhorada que acessa diretamente os dados carregados
"""

import time
import json
from typing import List, Dict, Optional
from datetime import datetime
import streamlit as st

from src.models.schemas import NivelRisco, RelatorioFiscal


class Agente5InterfaceV2:
    """
    Interface conversacional V2 para an√°lise fiscal
    Acessa diretamente os dados dos arquivos carregados
    """
    
    def __init__(self, llm):
        """
        Inicializa o agente conversacional
        
        Args:
            llm: Modelo de linguagem para processamento
        """
        self.llm = llm
        self.historico_conversa = []
        self.relatorio = None
        
        # Adicionar mensagem inicial
        mensagem_inicial = self._gerar_mensagem_inicial()
        self.historico_conversa.append({
            "role": "assistant",
            "content": mensagem_inicial
        })
    
    def conversar(self, mensagem_usuario: str) -> str:
        """
        Processa mensagem do usu√°rio e retorna resposta baseada nos dados carregados
        
        Args:
            mensagem_usuario: Pergunta ou comando do usu√°rio
        
        Returns:
            Resposta do assistente baseada nos dados reais
        """
        # Verificar se h√° dados dispon√≠veis
        dados_disponiveis = self._verificar_dados_disponiveis()
        if not dados_disponiveis:
            return "‚ùå Nenhum arquivo foi carregado. Por favor, fa√ßa upload de um arquivo XML ou CSV primeiro."
        
        # Adicionar mensagem do usu√°rio ao hist√≥rico
        self.historico_conversa.append({
            "role": "user",
            "content": mensagem_usuario
        })
        
        # Primeiro, tentar responder com consultas espec√≠ficas aos dados
        resposta_consulta = self._processar_consulta_dados(mensagem_usuario)
        if resposta_consulta:
            self.historico_conversa.append({
                "role": "assistant",
                "content": resposta_consulta
            })
            return resposta_consulta
        
        # Criar prompt com dados reais
        prompt = self._criar_prompt_com_dados_reais(mensagem_usuario)
        
        # Evitar logs de debug vis√≠veis ao usu√°rio final
        # (mantido em sil√™ncio para experi√™ncia limpa)
        
        try:
            # Verificar se o LLM est√° dispon√≠vel
            if not self.llm:
                return "‚ùå Modelo de linguagem n√£o dispon√≠vel. Por favor, recarregue a p√°gina."
            
            # Invocar LLM
            start_time = time.time()
            response = self.llm.invoke(prompt)
            response_time = time.time() - start_time
            
            # Extrair resposta
            if hasattr(response, 'content'):
                resposta = response.content
            else:
                resposta = str(response)
            
            # Limpar resposta de poss√≠veis prefixos indesejados
            resposta = self._limpar_resposta(resposta)
            
            # Adicionar resposta ao hist√≥rico
            self.historico_conversa.append({
                "role": "assistant",
                "content": resposta
            })
            
            return resposta
            
        except Exception as e:
            error_msg = str(e)
            # Se for erro de API key, sugerir usar modelo local
            if "api key" in error_msg.lower() or "401" in error_msg:
                return "‚ùå Erro de API key. O sistema est√° tentando usar o modelo local. Por favor, recarregue a p√°gina para reinicializar o chat."
            # Se for erro de contexto muito longo
            elif "contexto" in error_msg.lower() or "muito longo" in error_msg.lower() or "prompt" in error_msg.lower():
                return "‚ùå O contexto √© muito longo para o modelo. Tente fazer uma pergunta mais espec√≠fica ou use o bot√£o 'Reinicializar' para limpar o hist√≥rico."
            return f"‚ùå Erro ao processar pergunta: {error_msg}"
    
    def _processar_consulta_dados(self, mensagem: str) -> Optional[str]:
        """
        Processa consultas espec√≠ficas aos dados carregados
        Retorna resposta direta se for uma consulta espec√≠fica, None caso contr√°rio
        """
        mensagem_lower = mensagem.lower().strip()
        
        # Consultas sobre quantidade de NFs
        if any(palavra in mensagem_lower for palavra in ['quantas nf', 'quantas nota', 'quantas fiscal', 'total de nf', 'n√∫mero de nf']):
            return self._consultar_quantidade_nfs()
        
        # Consultas sobre valores
        if any(palavra in mensagem_lower for palavra in ['valor', 'pre√ßo', 'total', 'reais', 'r$']):
            return self._consultar_valores(mensagem_lower)
        
        # Consultas sobre itens
        if any(palavra in mensagem_lower for palavra in ['itens', 'produtos', 'mercadorias', 'quantidade de itens']):
            return self._consultar_itens()
        
        # Consultas sobre fraudes
        if any(palavra in mensagem_lower for palavra in ['fraude', 'fraudes', 'risco', 'problema', 'irregularidade']):
            return self._consultar_fraudes()
        
        # Consultas sobre datas
        if any(palavra in mensagem_lower for palavra in ['data', 'per√≠odo', 'ano', 'm√™s', 'quando']):
            return self._consultar_datas()
        
        # Consultas sobre CNPJ/CPF
        if any(palavra in mensagem_lower for palavra in ['cnpj', 'cpf', 'documento', 'emitente', 'destinat√°rio']):
            return self._consultar_documentos()
        
        # Consultas sobre NCM
        if any(palavra in mensagem_lower for palavra in ['ncm', 'c√≥digo', 'classifica√ß√£o']):
            return self._consultar_ncm()
        
        return None
    
    def _consultar_quantidade_nfs(self) -> str:
        """Consulta quantidade de NFs carregadas"""
        multiple_nfes = st.session_state.get('multiple_nfes', [])
        nfe_data = st.session_state.get('nfe_data')
        relatorio = st.session_state.get('relatorio')
        
        # Sem sa√≠da de debug para usu√°rios finais
        
        if multiple_nfes:
            return f"üìä **Total de NFs analisadas: {len(multiple_nfes)}**\n\nDetalhes:\n- NFs carregadas: {len(multiple_nfes)}\n- An√°lise individual de cada NF realizada"
        elif nfe_data:
            return "üìä **Total de NFs analisadas: 1**\n\nDetalhes:\n- 1 NF carregada e analisada"
        elif relatorio and hasattr(relatorio, 'resultado_analise'):
            resultado = relatorio.resultado_analise
            # Quando s√≥ temos o relat√≥rio consolidado, o n√∫mero de notas pode estar em
            # resultado.total_notas OU em resultado.resultado_analise['total_notas']
            if isinstance(resultado, dict):
                total_notas = resultado.get('total_notas')
            else:
                total_notas = getattr(resultado, 'total_notas', None)
                if total_notas is None and hasattr(resultado, 'resultado_analise'):
                    inner = getattr(resultado, 'resultado_analise')
                    if isinstance(inner, dict):
                        total_notas = inner.get('total_notas')
            if total_notas:
                try:
                    total = int(total_notas)
                    if total > 1:
                        return f"üìä **Total de NFs analisadas: {total}**\n\nDetalhes:\n- Resultado consolidado carregado\n- Dados agregados dispon√≠veis"
                except Exception:
                    pass
        else:
            return "‚ùå Nenhuma NF encontrada nos dados carregados."
    
    def _consultar_valores(self, mensagem: str) -> str:
        """Consulta valores das NFs"""
        multiple_nfes = st.session_state.get('multiple_nfes', [])
        nfe_data = st.session_state.get('nfe_data')
        relatorio = st.session_state.get('relatorio')
        
        if multiple_nfes:
            valores = [nfe.valor_total for nfe in multiple_nfes]
            valor_total = sum(valores)
            valor_medio = valor_total / len(valores)
            valor_min = min(valores)
            valor_max = max(valores)
            
            # Verificar se h√° filtro de faixa de valores
            if 'entre' in mensagem and ('reais' in mensagem or 'r$' in mensagem):
                # Extrair valores da mensagem (exemplo: "entre 500 e 1000")
                import re
                numeros = re.findall(r'\d+', mensagem)
                if len(numeros) >= 2:
                    min_valor = float(numeros[0])
                    max_valor = float(numeros[1])
                    nfs_filtradas = [nfe for nfe in multiple_nfes if min_valor <= nfe.valor_total <= max_valor]
                    
                    return f"üí∞ **NFs entre R$ {min_valor:,.2f} e R$ {max_valor:,.2f}:**\n\n- Quantidade: {len(nfs_filtradas)} NFs\n- Percentual: {(len(nfs_filtradas)/len(multiple_nfes)*100):.1f}% do total"
            
            return f"üí∞ **An√°lise de Valores:**\n\n- Valor total: R$ {valor_total:,.2f}\n- Valor m√©dio: R$ {valor_medio:,.2f}\n- Menor valor: R$ {valor_min:,.2f}\n- Maior valor: R$ {valor_max:,.2f}\n- Total de NFs: {len(multiple_nfes)}"
        
        elif nfe_data:
            return f"üí∞ **Valor da NF:**\n\n- Valor total: R$ {nfe_data.valor_total:,.2f}"
        elif relatorio and hasattr(relatorio, 'resultado_analise'):
            resultado = relatorio.resultado_analise
            inner = getattr(resultado, 'resultado_analise', None) if not isinstance(resultado, dict) else resultado
            if isinstance(inner, dict) and 'total_valor' in inner:
                return f"üí∞ **Valor Total (Consolidado):**\n\n- Valor somado das NFs: R$ {inner['total_valor']:,.2f}"
        
        return "‚ùå Nenhuma NF encontrada para an√°lise de valores."
    
    def _consultar_itens(self) -> str:
        """Consulta informa√ß√µes sobre itens"""
        multiple_nfes = st.session_state.get('multiple_nfes', [])
        nfe_data = st.session_state.get('nfe_data')
        
        if multiple_nfes:
            total_itens = sum(len(nfe.itens) for nfe in multiple_nfes)
            itens_por_nf = [len(nfe.itens) for nfe in multiple_nfes]
            media_itens = total_itens / len(multiple_nfes)
            
            return f"üì¶ **An√°lise de Itens:**\n\n- Total de itens: {total_itens}\n- M√©dia de itens por NF: {media_itens:.1f}\n- Menor quantidade: {min(itens_por_nf)}\n- Maior quantidade: {max(itens_por_nf)}\n- Total de NFs: {len(multiple_nfes)}"
        
        elif nfe_data:
            return f"üì¶ **Itens da NF:**\n\n- Total de itens: {len(nfe_data.itens)}"
        
        return "‚ùå Nenhuma NF encontrada para an√°lise de itens."
    
    def _consultar_fraudes(self) -> str:
        """Consulta informa√ß√µes sobre fraudes detectadas"""
        multiple_resultados = st.session_state.get('multiple_resultados', [])
        relatorio = st.session_state.get('relatorio')
        
        if multiple_resultados:
            total_fraudes = sum(len(resultado.fraudes_detectadas) for resultado in multiple_resultados)
            nfs_com_fraude = sum(1 for resultado in multiple_resultados if resultado.fraudes_detectadas)
            
            if total_fraudes > 0:
                fraudes_detalhadas = []
                for i, resultado in enumerate(multiple_resultados):
                    if resultado.fraudes_detectadas:
                        for fraude in resultado.fraudes_detectadas:
                            fraudes_detalhadas.append(f"NF {i+1}: {fraude.tipo_fraude} - {fraude.descricao}")
                
                return f"üö® **Fraudes Detectadas:**\n\n- Total de fraudes: {total_fraudes}\n- NFs com fraude: {nfs_com_fraude}\n- Percentual: {(nfs_com_fraude/len(multiple_resultados)*100):.1f}%\n\n**Detalhes:**\n" + "\n".join(fraudes_detalhadas[:10])  # Limitar a 10 fraudes
            else:
                return "‚úÖ **Nenhuma fraude detectada**\n\nTodas as NFs analisadas est√£o em conformidade."
        
        elif relatorio and hasattr(relatorio, 'resultado_analise'):
            resultado = relatorio.resultado_analise
            if resultado.fraudes_detectadas:
                fraudes_detalhadas = [f"- {fraude.tipo_fraude}: {fraude.descricao}" for fraude in resultado.fraudes_detectadas]
                return f"üö® **Fraudes Detectadas:**\n\n- Total: {len(resultado.fraudes_detectadas)}\n\n**Detalhes:**\n" + "\n".join(fraudes_detalhadas)
            else:
                return "‚úÖ **Nenhuma fraude detectada**\n\nA NF analisada est√° em conformidade."
        
        return "‚ùå Nenhuma an√°lise de fraude dispon√≠vel."
    
    def _consultar_datas(self) -> str:
        """Consulta informa√ß√µes sobre datas"""
        multiple_nfes = st.session_state.get('multiple_nfes', [])
        nfe_data = st.session_state.get('nfe_data')
        
        if multiple_nfes:
            datas = []
            for nfe in multiple_nfes:
                if hasattr(nfe, 'data_emissao'):
                    datas.append(nfe.data_emissao)
            
            if datas:
                from datetime import datetime
                datas_ordenadas = sorted(datas)
                data_mais_antiga = datas_ordenadas[0]
                data_mais_recente = datas_ordenadas[-1]
                
                return f"üìÖ **Per√≠odo das NFs:**\n\n- Data mais antiga: {data_mais_antiga}\n- Data mais recente: {data_mais_recente}\n- Total de NFs: {len(multiple_nfes)}"
        
        elif nfe_data and hasattr(nfe_data, 'data_emissao'):
            return f"üìÖ **Data da NF:**\n\n- Data de emiss√£o: {nfe_data.data_emissao}"
        
        return "‚ùå Informa√ß√µes de data n√£o dispon√≠veis."
    
    def _consultar_documentos(self) -> str:
        """Consulta informa√ß√µes sobre CNPJ/CPF"""
        multiple_nfes = st.session_state.get('multiple_nfes', [])
        nfe_data = st.session_state.get('nfe_data')
        
        if multiple_nfes:
            cnpjs_emitentes = set()
            cnpjs_destinatarios = set()
            
            for nfe in multiple_nfes:
                if hasattr(nfe, 'cnpj_emitente'):
                    cnpjs_emitentes.add(nfe.cnpj_emitente)
                if hasattr(nfe, 'cnpj_destinatario'):
                    cnpjs_destinatarios.add(nfe.cnpj_destinatario)
            
            return f"üìÑ **Documentos Encontrados:**\n\n- CNPJs √∫nicos (emitentes): {len(cnpjs_emitentes)}\n- CNPJs √∫nicos (destinat√°rios): {len(cnpjs_destinatarios)}\n- Total de NFs: {len(multiple_nfes)}"
        
        elif nfe_data:
            info = []
            if hasattr(nfe_data, 'cnpj_emitente'):
                info.append(f"- CNPJ Emitente: {nfe_data.cnpj_emitente}")
            if hasattr(nfe_data, 'cnpj_destinatario'):
                info.append(f"- CNPJ Destinat√°rio: {nfe_data.cnpj_destinatario}")
            
            if info:
                return f"üìÑ **Documentos da NF:**\n\n" + "\n".join(info)
        
        return "‚ùå Informa√ß√µes de documentos n√£o dispon√≠veis."
    
    def _consultar_ncm(self) -> str:
        """Consulta informa√ß√µes sobre c√≥digos NCM"""
        multiple_nfes = st.session_state.get('multiple_nfes', [])
        nfe_data = st.session_state.get('nfe_data')
        
        if multiple_nfes:
            ncms = set()
            for nfe in multiple_nfes:
                for item in nfe.itens:
                    if hasattr(item, 'ncm'):
                        ncms.add(item.ncm)
            
            return f"üè∑Ô∏è **C√≥digos NCM:**\n\n- NCMs √∫nicos: {len(ncms)}\n- Total de itens: {sum(len(nfe.itens) for nfe in multiple_nfes)}\n- Total de NFs: {len(multiple_nfes)}"
        
        elif nfe_data:
            ncms = set()
            for item in nfe_data.itens:
                if hasattr(item, 'ncm'):
                    ncms.add(item.ncm)
            
            return f"üè∑Ô∏è **C√≥digos NCM da NF:**\n\n- NCMs √∫nicos: {len(ncms)}\n- Total de itens: {len(nfe_data.itens)}"
        
        return "‚ùå Informa√ß√µes de NCM n√£o dispon√≠veis."

    def _limpar_resposta(self, resposta: str) -> str:
        """Limpa a resposta de prefixos indesejados"""
        if not resposta:
            return resposta
        
        # Remover prefixos comuns
        prefixes_to_remove = [
            "ASSISTENTE:",
            "ASSISTANT:",
            "RESPOSTA:",
            "RESPONSE:",
            "ANSWER:",
            "Voc√™ √© um assistente fiscal especializado.",
        ]
        
        resposta_limpa = resposta.strip()
        for prefix in prefixes_to_remove:
            if resposta_limpa.startswith(prefix):
                resposta_limpa = resposta_limpa[len(prefix):].strip()
        
        return resposta_limpa
    
    def _verificar_dados_disponiveis(self) -> bool:
        """Verifica se h√° dados de arquivos carregados"""
        # Verificar m√∫ltiplas NFs
        multiple_nfes = st.session_state.get('multiple_nfes', [])
        multiple_resultados = st.session_state.get('multiple_resultados', [])
        
        # Verificar NF √∫nica
        nfe_data = st.session_state.get('nfe_data')
        relatorio = st.session_state.get('relatorio')
        
        # Verificar dados CSV
        csv_data = st.session_state.get('csv_data')
        
        # Debug: mostrar o que est√° dispon√≠vel
        print(f"DEBUG Agente5V2: multiple_nfes={len(multiple_nfes) if multiple_nfes else 0}")
        print(f"DEBUG Agente5V2: multiple_resultados={len(multiple_resultados) if multiple_resultados else 0}")
        print(f"DEBUG Agente5V2: nfe_data={nfe_data is not None}")
        print(f"DEBUG Agente5V2: relatorio={relatorio is not None}")
        print(f"DEBUG Agente5V2: csv_data={csv_data is not None}")
        
        return bool(multiple_nfes or nfe_data or relatorio or csv_data)
    
    def _criar_prompt_com_dados_reais(self, mensagem_usuario: str) -> str:
        """Cria prompt com dados reais dos arquivos carregados"""
        
        # Coletar dados reais com truncamento inteligente
        dados_info = self._coletar_dados_reais_otimizado()
        
        # Incluir refer√™ncia do arquivo, se dispon√≠vel
        xml_path = st.session_state.get('uploaded_xml_path')
        origem_arquivo = f"\nARQUIVO: {xml_path}\n" if xml_path else "\n"
        
        # Hist√≥rico recente (√∫ltimas 2 mensagens)
        historico_recente = self.historico_conversa[-2:]
        historico_str = "\n".join([
            f"{msg['role'].upper()}: {msg['content']}"
            for msg in historico_recente
        ])
        
        # Prompt otimizado
        prompt = f"""Voc√™ √© um assistente fiscal especializado. Responda baseado nos dados reais fornecidos.

DADOS DOS ARQUIVOS CARREGADOS:
{dados_info}
{origem_arquivo}

PERGUNTA: {mensagem_usuario}

HIST√ìRICO RECENTE:
{historico_str}

INSTRU√á√ïES:
1. Responda APENAS com base nos dados fornecidos acima
2. Seja direto e objetivo (m√°ximo 3 par√°grafos)
3. Use dados espec√≠ficos dos arquivos quando dispon√≠vel
4. Se a pergunta mencionar NFs espec√≠ficas, responda considerando TODAS as NFs do arquivo quando dispon√≠veis; se s√≥ houver relat√≥rio consolidado, explique claramente qualquer limita√ß√£o.
5. Use **negrito** para destacar informa√ß√µes importantes
6. Termine a resposta com um ponto final

RESPOSTA:"""
        
        return prompt
    
    def _coletar_dados_reais(self) -> str:
        """Coleta dados reais dos arquivos carregados"""
        dados = []
        
        # Verificar m√∫ltiplas NFs (PRIORIDADE M√ÅXIMA)
        multiple_nfes = st.session_state.get('multiple_nfes', [])
        multiple_resultados = st.session_state.get('multiple_resultados', [])
        
        print(f"DEBUG _coletar_dados_reais: multiple_nfes={len(multiple_nfes) if multiple_nfes else 0}")
        print(f"DEBUG _coletar_dados_reais: multiple_resultados={len(multiple_resultados) if multiple_resultados else 0}")
        print(f"DEBUG _coletar_dados_reais: session_state keys={list(st.session_state.keys())}")
        
        # Verificar se h√° dados de m√∫ltiplas NFs
        if multiple_nfes and len(multiple_nfes) > 0:
            # Dados de m√∫ltiplas NFs
            total_valor = sum(nfe.valor_total for nfe in multiple_nfes)
            total_itens = sum(len(nfe.itens) for nfe in multiple_nfes)
            total_fraudes = sum(len(resultado.fraudes_detectadas) for resultado in multiple_resultados)
            score_medio = sum(resultado.score_risco_geral for resultado in multiple_resultados) / len(multiple_resultados)
            
            dados.append(f"""
M√öLTIPLAS NOTAS FISCAIS (NFS-e):
- Total de NFs: {len(multiple_nfes)}
- Valor Total: R$ {total_valor:,.2f}
- Total de Itens: {total_itens}
- Score M√©dio de Risco: {score_medio:.1f}/100
- Total de Fraudes Detectadas: {total_fraudes}

DETALHES POR NF:
""")
            
            # Adicionar detalhes das primeiras 10 NFs
            for i, (nfe, resultado) in enumerate(zip(multiple_nfes[:10], multiple_resultados[:10]), 1):
                serie = getattr(nfe, 'serie', '1')  # Usar s√©rie padr√£o se n√£o existir
                dados.append(f"NF {i}: {nfe.numero}/{serie} - R$ {nfe.valor_total:,.2f} - Risco: {resultado.score_risco_geral}/100 - Fraudes: {len(resultado.fraudes_detectadas)}")
            
            if len(multiple_nfes) > 10:
                dados.append(f"... e mais {len(multiple_nfes) - 10} NFs")
        
        # Verificar NF √∫nica
        nfe_data = st.session_state.get('nfe_data')
        if nfe_data and not multiple_nfes:
            dados.append(f"""
NOTA FISCAL √öNICA:
- N√∫mero: {nfe_data.numero}/{nfe_data.serie}
- Chave: {nfe_data.chave_acesso}
- Data: {nfe_data.data_emissao.strftime('%d/%m/%Y') if hasattr(nfe_data, 'data_emissao') else 'N/A'}
- Emitente: {getattr(nfe_data, 'razao_social_emitente', getattr(nfe_data, 'cnpj_emitente', 'N/A'))}
- Destinat√°rio: {getattr(nfe_data, 'razao_social_destinatario', getattr(nfe_data, 'cnpj_destinatario', 'N/A'))}
- Valor Total: R$ {nfe_data.valor_total:,.2f}
- N√∫mero de Itens: {len(nfe_data.itens)}
""")
        
        # Verificar dados CSV
        csv_data = st.session_state.get('csv_data')
        if csv_data is not None:
            dados.append(f"""
DADOS CSV:
- Total de Linhas: {len(csv_data)}
- Colunas: {', '.join(csv_data.columns.tolist())}
- Primeiras 5 linhas:
{csv_data.head().to_string()}
""")
        
        # Verificar relat√≥rio consolidado (fallback)
        relatorio = st.session_state.get('relatorio')
        if relatorio and not multiple_nfes:
            resultado = relatorio.resultado_analise if hasattr(relatorio, 'resultado_analise') else relatorio
            # Se o relat√≥rio for consolidado, campos podem estar em um dict interno
            inner = None
            if not isinstance(resultado, dict) and hasattr(resultado, 'resultado_analise'):
                inner = getattr(resultado, 'resultado_analise')
            base = inner if isinstance(inner, dict) else (resultado if isinstance(resultado, dict) else {})
            total_notas = base.get('total_notas')
            if total_notas and total_notas > 1:
                total_valor = base.get('total_valor', 0)
                total_itens = base.get('total_itens', 0)
                total_fraudes = base.get('total_fraudes', 0)
                dados.append(f"""
M√öLTIPLAS NOTAS FISCAIS (Consolidado):
- Total de NFs: {int(total_notas)}
- Valor Total: R$ {total_valor:,.2f}
- Itens: {int(total_itens)}
- Fraudes: {int(total_fraudes)}
""")
            else:
                dados.append(f"""
RELAT√ìRIO CONSOLIDADO:
- Score de Risco: {getattr(resultado, 'score_risco_geral', 0)}/100
- N√≠vel de Risco: {getattr(resultado, 'nivel_risco', NivelRisco.BAIXO).value.upper()}
- Fraudes Detectadas: {len(getattr(resultado, 'fraudes_detectadas', []))}
- Itens Suspeitos: {len(getattr(resultado, 'itens_suspeitos', []))}
""")
        
        # Se n√£o h√° dados espec√≠ficos, mas h√° relat√≥rio, usar informa√ß√µes b√°sicas
        if not dados and relatorio:
            resultado = relatorio.resultado_analise if hasattr(relatorio, 'resultado_analise') else relatorio
            dados.append(f"""
DADOS DISPON√çVEIS:
- Score de Risco: {getattr(resultado, 'score_risco_geral', 0)}/100
- N√≠vel de Risco: {getattr(resultado, 'nivel_risco', NivelRisco.BAIXO).value.upper()}
- Fraudes Detectadas: {len(getattr(resultado, 'fraudes_detectadas', []))}
- Itens Suspeitos: {len(getattr(resultado, 'itens_suspeitos', []))}

NOTA: Este √© um relat√≥rio consolidado. Para informa√ß√µes espec√≠ficas sobre quantidade de NFs e valores totais, 
√© necess√°rio que os dados das m√∫ltiplas NFs estejam dispon√≠veis no session_state.
""")
        
        return "\n".join(dados) if dados else "Nenhum dado dispon√≠vel"
    
    def _coletar_dados_reais_otimizado(self) -> str:
        """Coleta dados reais com truncamento inteligente para evitar prompts muito longos"""
        
        # Limite de caracteres para o contexto (ajustado para modelo local)
        MAX_CONTEXT_CHARS = 2000  # Reduzido para modelo local
        
        # Coletar dados b√°sicos primeiro
        dados_basicos = self._coletar_dados_basicos()
        
        # Se os dados b√°sicos j√° s√£o suficientes, usar apenas eles
        if len(dados_basicos) <= MAX_CONTEXT_CHARS:
            return dados_basicos
        
        # Se muito longo, truncar inteligentemente
        return self._truncar_dados_inteligentemente(dados_basicos, MAX_CONTEXT_CHARS)
    
    def _coletar_dados_basicos(self) -> str:
        """Coleta apenas dados essenciais para o contexto"""
        dados = []
        
        # Verificar m√∫ltiplas NFs
        multiple_nfes = st.session_state.get('multiple_nfes', [])
        multiple_resultados = st.session_state.get('multiple_resultados', [])
        
        if multiple_nfes and multiple_resultados:
            # Calcular estat√≠sticas b√°sicas
            total_valor = sum(nfe.valor_total for nfe in multiple_nfes)
            total_itens = sum(len(nfe.itens) for nfe in multiple_nfes)
            scores = [r.score_risco_geral for r in multiple_resultados if hasattr(r, 'score_risco_geral')]
            score_medio = sum(scores) / len(scores) if scores else 0
            total_fraudes = sum(len(r.fraudes_detectadas) for r in multiple_resultados if hasattr(r, 'fraudes_detectadas'))
            
            dados.append(f"""M√öLTIPLAS NOTAS FISCAIS:
- Total: {len(multiple_nfes)} NFs
- Valor Total: R$ {total_valor:,.2f}
- Itens: {total_itens}
- Risco M√©dio: {score_medio:.1f}/100
- Fraudes: {total_fraudes}""")
            
            # Adicionar apenas as primeiras 3 NFs como exemplo
            for i, (nfe, resultado) in enumerate(zip(multiple_nfes[:3], multiple_resultados[:3]), 1):
                serie = getattr(nfe, 'serie', '1')
                score = getattr(resultado, 'score_risco_geral', 0)
                fraudes = len(getattr(resultado, 'fraudes_detectadas', []))
                dados.append(f"NF {i}: {nfe.numero}/{serie} - R$ {nfe.valor_total:,.2f} - Risco: {score}/100 - Fraudes: {fraudes}")
            
            if len(multiple_nfes) > 3:
                dados.append(f"... e mais {len(multiple_nfes) - 3} NFs")
        
        # Verificar NF √∫nica
        nfe_data = st.session_state.get('nfe_data')
        if nfe_data and not multiple_nfes:
            dados.append(f"""NOTA FISCAL √öNICA:
- N√∫mero: {nfe_data.numero}/{getattr(nfe_data, 'serie', '1')}
- Valor: R$ {nfe_data.valor_total:,.2f}
- Itens: {len(nfe_data.itens)}""")
        
        # Verificar dados CSV
        csv_data = st.session_state.get('csv_data')
        if csv_data is not None:
            dados.append(f"""DADOS CSV:
- Linhas: {len(csv_data)}
- Colunas: {', '.join(csv_data.columns.tolist()[:5])}{'...' if len(csv_data.columns) > 5 else ''}""")
        
        # Verificar relat√≥rio consolidado
        relatorio = st.session_state.get('relatorio')
        if relatorio and not multiple_nfes:
            resultado = relatorio.resultado_analise if hasattr(relatorio, 'resultado_analise') else relatorio
            score = getattr(resultado, 'score_risco_geral', 0)
            nivel = getattr(resultado, 'nivel_risco', NivelRisco.BAIXO).value.upper()
            fraudes = len(getattr(resultado, 'fraudes_detectadas', []))
            dados.append(f"""RELAT√ìRIO:
- Risco: {score}/100 ({nivel})
- Fraudes: {fraudes}""")
        
        return "\n".join(dados) if dados else "Nenhum dado dispon√≠vel"
    
    def _truncar_dados_inteligentemente(self, dados: str, max_chars: int) -> str:
        """Trunca dados de forma inteligente mantendo informa√ß√µes essenciais"""
        if len(dados) <= max_chars:
            return dados
        
        # Dividir em se√ß√µes
        secoes = dados.split('\n\n')
        resultado = []
        chars_usados = 0
        
        for secao in secoes:
            if chars_usados + len(secao) + 2 <= max_chars:
                resultado.append(secao)
                chars_usados += len(secao) + 2
            else:
                # Adicionar resumo da se√ß√£o restante
                if "M√öLTIPLAS NOTAS" in secao:
                    resultado.append("... (dados adicionais truncados para economizar contexto)")
                break
        
        return '\n\n'.join(resultado)
    
    def _truncar_prompt_se_necessario(self, prompt: str) -> str:
        """Trunca o prompt se for muito longo para o modelo"""
        # Limite conservador para modelo local (aproximadamente 2000 tokens)
        MAX_PROMPT_CHARS = 4000
        
        if len(prompt) <= MAX_PROMPT_CHARS:
            return prompt
        
        # Dividir o prompt em se√ß√µes
        linhas = prompt.split('\n')
        
        # Manter sempre: instru√ß√µes, pergunta, hist√≥rico
        secoes_essenciais = []
        secoes_dados = []
        
        em_dados = False
        for linha in linhas:
            if linha.startswith('DADOS:'):
                em_dados = True
                secoes_dados.append(linha)
            elif linha.startswith('PERGUNTA:'):
                em_dados = False
                secoes_essenciais.append(linha)
            elif em_dados:
                secoes_dados.append(linha)
            else:
                secoes_essenciais.append(linha)
        
        # Construir prompt truncado
        prompt_truncado = '\n'.join(secoes_essenciais)
        
        # Adicionar dados truncados se houver espa√ßo
        if secoes_dados:
            dados_truncados = '\n'.join(secoes_dados)
            if len(prompt_truncado) + len(dados_truncados) <= MAX_PROMPT_CHARS:
                # Inserir dados antes da pergunta
                linhas_finais = prompt_truncado.split('\n')
                pergunta_idx = next(i for i, linha in enumerate(linhas_finais) if linha.startswith('PERGUNTA:'))
                linhas_finais.insert(pergunta_idx, dados_truncados)
                prompt_truncado = '\n'.join(linhas_finais)
            else:
                # Adicionar apenas resumo dos dados
                prompt_truncado = prompt_truncado.replace('DADOS:', 'DADOS: (dados truncados - contexto muito longo)')
        
        return prompt_truncado
    
    def _gerar_mensagem_inicial(self) -> str:
        """Gera mensagem inicial baseada nos dados dispon√≠veis"""
        dados_disponiveis = self._verificar_dados_disponiveis()
        
        if not dados_disponiveis:
            return """üëã **Ol√°! Sou seu assistente fiscal inteligente.**

Carregue um arquivo XML ou CSV para come√ßar a an√°lise e consultas.

**Exemplos de perguntas que posso responder:**
‚Ä¢ Quantas NFs foram analisadas?
‚Ä¢ Qual o valor total das NFs?
‚Ä¢ Quantas NFs est√£o entre R$ 500 e R$ 1000?
‚Ä¢ Quais fraudes foram detectadas?
‚Ä¢ Quantos itens tem cada NF?
‚Ä¢ Quais CNPJs est√£o nas NFs?
‚Ä¢ Qual o per√≠odo das NFs?"""
        
        # Coletar resumo dos dados
        dados_info = self._coletar_dados_reais()
        
        # Extrair informa√ß√µes principais
        if "M√öLTIPLAS NOTAS FISCAIS" in dados_info:
            # Extrair n√∫mero de NFs
            import re
            match = re.search(r'Total de NFs: (\d+)', dados_info)
            num_nfs = match.group(1) if match else "v√°rias"
            
            return f"""üéâ **An√°lise Fiscal Conclu√≠da!**

**{num_nfs} Notas Fiscais** foram processadas com sucesso!

**Agora posso responder suas consultas sobre os dados:**
‚Ä¢ Quantas NFs foram analisadas?
‚Ä¢ Qual o valor total das NFs?
‚Ä¢ Quantas NFs est√£o entre R$ 500 e R$ 1000?
‚Ä¢ Quais fraudes foram detectadas?
‚Ä¢ Quantos itens tem cada NF?
‚Ä¢ Quais CNPJs est√£o nas NFs?
‚Ä¢ Qual o per√≠odo das NFs?

**Fa√ßa sua pergunta!** üí¨

Posso ajud√°-lo com informa√ß√µes sobre:
- Quantidade de NFs analisadas
- Valores totais e por NF
- Detec√ß√£o de fraudes
- Classifica√ß√£o NCM
- Valida√ß√µes fiscais
- E muito mais!

**Como posso ajud√°-lo hoje?**"""
        
        elif "NOTA FISCAL √öNICA" in dados_info:
            return f"""üéâ **An√°lise Fiscal Conclu√≠da!**

**1 Nota Fiscal** foi processada com sucesso!

Posso ajud√°-lo com informa√ß√µes sobre:
- Detalhes da NF
- Valida√ß√µes fiscais
- Detec√ß√£o de fraudes
- Classifica√ß√£o NCM
- E muito mais!

**Como posso ajud√°-lo hoje?**"""
        
        else:
            return f"""üéâ **An√°lise Conclu√≠da!**

Dados carregados e processados com sucesso!

Posso ajud√°-lo com informa√ß√µes sobre:
- Detalhes dos arquivos
- An√°lises realizadas
- Resultados e insights
- E muito mais!

**Como posso ajud√°-lo hoje?**"""
    
    def obter_historico(self) -> List[Dict[str, str]]:
        """Retorna hist√≥rico completo da conversa"""
        return self.historico_conversa.copy()
    
    def limpar_historico(self):
        """Limpa hist√≥rico de conversa"""
        self.historico_conversa = []
        mensagem_inicial = self._gerar_mensagem_inicial()
        self.historico_conversa.append({
            "role": "assistant",
            "content": mensagem_inicial
        })
    
    def exportar_conversa(self) -> str:
        """Exporta conversa para formato de texto"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        header = f"""# CONVERSA FISCALAI - {timestamp}
# Exportado em: {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}
# ================================================

"""
        
        conversa_texto = []
        for i, msg in enumerate(self.historico_conversa, 1):
            role = "USU√ÅRIO" if msg["role"] == "user" else "ASSISTENTE"
            conversa_texto.append(f"{i}. {role}: {msg['content']}")
        
        return header + "\n\n".join(conversa_texto)
    
    def sugerir_perguntas(self) -> List[str]:
        """Sugere perguntas relevantes baseadas nos dados carregados"""
        dados_disponiveis = self._verificar_dados_disponiveis()
        
        if not dados_disponiveis:
            return []
        
        # Verificar tipo de dados
        multiple_nfes = st.session_state.get('multiple_nfes', [])
        csv_data = st.session_state.get('csv_data')
        
        if multiple_nfes:
            return [
                "Quantas NFs foram analisadas?",
                "Qual o valor total das NFs?",
                "Quantas fraudes foram detectadas?",
                "Qual o score de risco m√©dio?",
                "Quais NFs t√™m maior risco?",
                "Quantos itens foram processados?",
                "Qual NF tem o maior valor?",
                "H√° padr√µes suspeitos nas NFs?"
            ]
        elif csv_data is not None:
            return [
                "Quantas linhas foram processadas?",
                "Quais s√£o as colunas dispon√≠veis?",
                "H√° dados faltantes no arquivo?",
                "Qual o resumo dos dados?",
                "H√° inconsist√™ncias nos dados?"
            ]
        else:
            return [
                "Quais s√£o os principais resultados?",
                "H√° fraudes detectadas?",
                "Qual o n√≠vel de risco?",
                "Quais valida√ß√µes foram feitas?"
            ]
