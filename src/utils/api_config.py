"""
FiscalAI MVP - Configura√ß√£o de Chaves de API
Sistema amig√°vel para configura√ß√£o de chaves de API para usu√°rios n√£o-t√©cnicos
"""

import os
import streamlit as st
from pathlib import Path
from typing import Dict, Optional, List
import json
from datetime import datetime
import base64
from cryptography.fernet import Fernet
import hashlib

class APIConfigManager:
    """
    Gerenciador de configura√ß√£o de chaves de API
    Interface amig√°vel para usu√°rios n√£o-t√©cnicos
    """
    
    def __init__(self):
        """Inicializa o gerenciador de configura√ß√£o"""
        self.config_dir = Path.home() / ".fiscalai"
        self.config_dir.mkdir(exist_ok=True)
        self.config_file = self.config_dir / "api_config.json"
        self.encryption_key_file = self.config_dir / ".fiscalai_key"
        
        # Inicializar chave de criptografia
        self._init_encryption_key()
    
    def _init_encryption_key(self):
        """Inicializa ou carrega chave de criptografia"""
        if not self.encryption_key_file.exists():
            key = Fernet.generate_key()
            with open(self.encryption_key_file, 'wb') as f:
                f.write(key)
            # Tornar arquivo oculto e com permiss√µes restritas
            os.chmod(self.encryption_key_file, 0o600)
        
        with open(self.encryption_key_file, 'rb') as f:
            self.fernet = Fernet(f.read())
    
    def _encrypt_value(self, value: str) -> str:
        """Criptografa um valor"""
        if not value:
            return ""
        return self.fernet.encrypt(value.encode()).decode()
    
    def _decrypt_value(self, encrypted_value: str) -> str:
        """Descriptografa um valor"""
        if not encrypted_value:
            return ""
        try:
            return self.fernet.decrypt(encrypted_value.encode()).decode()
        except:
            return ""
    
    def get_config(self) -> Dict[str, str]:
        """Obt√©m configura√ß√£o atual"""
        if not self.config_file.exists():
            return {}
        
        try:
            with open(self.config_file, 'r') as f:
                encrypted_config = json.load(f)
            
            config = {}
            for key, encrypted_value in encrypted_config.items():
                config[key] = self._decrypt_value(encrypted_value)
            
            return config
        except Exception as e:
            st.error(f"Erro ao carregar configura√ß√£o: {e}")
            return {}
    
    def save_config(self, config: Dict[str, str]) -> bool:
        """Salva configura√ß√£o criptografada"""
        try:
            encrypted_config = {}
            for key, value in config.items():
                encrypted_config[key] = self._encrypt_value(value)
            
            with open(self.config_file, 'w') as f:
                json.dump(encrypted_config, f, indent=2)
            
            # Tornar arquivo com permiss√µes restritas
            os.chmod(self.config_file, 0o600)
            return True
        except Exception as e:
            st.error(f"Erro ao salvar configura√ß√£o: {e}")
            return False
    
    def get_providers_info(self) -> List[Dict[str, str]]:
        """Obt√©m informa√ß√µes sobre provedores de API"""
        return [
            {
                "name": "OpenAI",
                "description": "GPT-4, GPT-3.5 Turbo - An√°lise avan√ßada de texto",
                "website": "https://platform.openai.com/api-keys",
                "icon": "ü§ñ",
                "required": False,
                "config_key": "OPENAI_API_KEY"
            },
            {
                "name": "Anthropic (Claude)",
                "description": "Claude 3 - An√°lise contextual avan√ßada",
                "website": "https://console.anthropic.com/",
                "icon": "üß†",
                "required": False,
                "config_key": "ANTHROPIC_API_KEY"
            },
            {
                "name": "Google (Gemini)",
                "description": "Gemini Pro - An√°lise multimodal",
                "website": "https://makersuite.google.com/app/apikey",
                "icon": "üîç",
                "required": False,
                "config_key": "GOOGLE_API_KEY"
            },
            {
                "name": "Groq",
                "description": "Llama 2, Mixtral - Processamento r√°pido",
                "website": "https://console.groq.com/keys",
                "icon": "‚ö°",
                "required": False,
                "config_key": "GROQ_API_KEY"
            }
        ]


def show_api_config_page():
    """Mostra p√°gina de configura√ß√£o de API"""
    st.header("üîë Configura√ß√£o de Chaves de API")
    
    # Explica√ß√£o para usu√°rios n√£o-t√©cnicos
    st.markdown("""
    ### üìã O que s√£o chaves de API?
    
    As chaves de API s√£o como "senhas especiais" que permitem ao FiscalAI usar servi√ßos de intelig√™ncia artificial 
    para analisar suas notas fiscais com mais precis√£o.
    
    **üéØ Por que usar?**
    - ‚úÖ **An√°lise mais precisa** de NCMs e CFOPs
    - ‚úÖ **Detec√ß√£o avan√ßada** de fraudes
    - ‚úÖ **Classifica√ß√£o inteligente** de produtos
    - ‚úÖ **Relat√≥rios mais detalhados**
    
    **üîí √â seguro?**
    - ‚úÖ Suas chaves s√£o **criptografadas** e armazenadas localmente
    - ‚úÖ **Nunca s√£o enviadas** para servidores externos
    - ‚úÖ Voc√™ pode **remover** a qualquer momento
    """)
    
    # Inicializar gerenciador
    config_manager = APIConfigManager()
    current_config = config_manager.get_config()
    providers = config_manager.get_providers_info()
    
    # Tabs para diferentes provedores
    tabs = st.tabs([f"{provider['icon']} {provider['name']}" for provider in providers])
    
    for i, (tab, provider) in enumerate(zip(tabs, providers)):
        with tab:
            st.subheader(f"{provider['icon']} {provider['name']}")
            st.write(provider['description'])
            
            # Status atual
            current_key = current_config.get(provider['config_key'], '')
            if current_key:
                st.success("‚úÖ Chave configurada")
                # Mostrar √∫ltimos 4 caracteres para confirma√ß√£o
                masked_key = "*" * (len(current_key) - 4) + current_key[-4:] if len(current_key) > 4 else "*" * len(current_key)
                st.code(f"Chave: {masked_key}")
            else:
                st.warning("‚ö†Ô∏è Chave n√£o configurada")
            
            # Formul√°rio de configura√ß√£o
            with st.form(f"config_{provider['name'].lower()}"):
                st.markdown(f"**Como obter sua chave:**")
                st.markdown(f"1. Acesse: [{provider['website']}]({provider['website']})")
                st.markdown("2. Crie uma conta (se necess√°rio)")
                st.markdown("3. Gere uma nova chave de API")
                st.markdown("4. Cole a chave abaixo:")
                
                new_key = st.text_input(
                    f"Chave de API {provider['name']}",
                    value="",
                    type="password",
                    help=f"Cole sua chave de API do {provider['name']} aqui"
                )
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.form_submit_button("üíæ Salvar Chave", use_container_width=True):
                        if new_key:
                            # Validar formato b√°sico da chave
                            if validate_api_key(new_key, provider['name']):
                                config = current_config.copy()
                                config[provider['config_key']] = new_key
                                
                                if config_manager.save_config(config):
                                    st.success(f"‚úÖ Chave {provider['name']} salva com sucesso!")
                                    st.rerun()
                                else:
                                    st.error("‚ùå Erro ao salvar chave")
                            else:
                                st.error("‚ùå Formato de chave inv√°lido")
                        else:
                            st.error("‚ùå Por favor, insira uma chave v√°lida")
                
                with col2:
                    if st.form_submit_button("üóëÔ∏è Remover Chave", use_container_width=True):
                        config = current_config.copy()
                        config.pop(provider['config_key'], None)
                        
                        if config_manager.save_config(config):
                            st.success(f"‚úÖ Chave {provider['name']} removida!")
                            st.rerun()
                        else:
                            st.error("‚ùå Erro ao remover chave")
    
    # Se√ß√£o de informa√ß√µes adicionais
    st.markdown("---")
    
    with st.expander("‚ÑπÔ∏è Informa√ß√µes Importantes"):
        st.markdown("""
        **üîê Seguran√ßa:**
        - Suas chaves s√£o armazenadas de forma criptografada no seu computador
        - Elas nunca s√£o compartilhadas ou enviadas para servidores externos
        - Voc√™ pode remover as chaves a qualquer momento
        
        **üí∞ Custos:**
        - Alguns provedores cobram por uso (geralmente centavos por an√°lise)
        - O FiscalAI usa as chaves apenas quando necess√°rio
        - Voc√™ pode configurar limites de uso nos provedores
        
        **üöÄ Sem chaves:**
        - O FiscalAI funciona sem chaves, mas com funcionalidades limitadas
        - An√°lises b√°sicas s√£o sempre gratuitas
        - Chaves melhoram a precis√£o e velocidade
        
        **üÜò Precisa de ajuda?**
        - Consulte a documenta√ß√£o de cada provedor
        - Verifique se sua conta tem cr√©ditos dispon√≠veis
        - Teste com uma an√°lise simples primeiro
        """)


def validate_api_key(key: str, provider: str) -> bool:
    """Valida formato b√°sico da chave de API"""
    if not key or len(key) < 10:
        return False
    
    # Valida√ß√µes espec√≠ficas por provedor
    if provider.lower() == "openai":
        return key.startswith("sk-") and len(key) > 20
    elif provider.lower() == "anthropic":
        return key.startswith("sk-ant-") and len(key) > 20
    elif provider.lower() == "google":
        return len(key) > 20  # Google keys s√£o mais variadas
    elif provider.lower() == "groq":
        return key.startswith("gsk_") and len(key) > 20
    
    return len(key) > 10  # Valida√ß√£o gen√©rica


def show_api_status():
    """Mostra status das chaves de API configuradas"""
    config_manager = APIConfigManager()
    config = config_manager.get_config()
    providers = config_manager.get_providers_info()
    
    configured_count = sum(1 for provider in providers if config.get(provider['config_key']))
    total_count = len(providers)
    
    # Criar layout com colunas para as mensagens
    col1, col2 = st.columns([1, 1])
    
    if configured_count == 0:
        with col1:
            st.markdown("""
            <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 12px; margin: 8px 0;">
                <p style="margin: 0; color: #856404; font-weight: 500;">‚ö†Ô∏è Nenhuma chave de API configurada</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div style="background-color: #d1ecf1; border: 1px solid #bee5eb; border-radius: 8px; padding: 12px; margin: 8px 0;">
                <p style="margin: 0; color: #0c5460; font-weight: 500;">üí° Configure chaves de API para melhorar a an√°lise</p>
            </div>
            """, unsafe_allow_html=True)
    elif configured_count < total_count:
        st.markdown(f"""
        <div style="background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 12px; margin: 8px 0; text-align: center;">
            <p style="margin: 0; color: #155724; font-weight: 500;">‚úÖ {configured_count}/{total_count} chaves configuradas</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"""
        <div style="background-color: #d1ecf1; border: 1px solid #bee5eb; border-radius: 8px; padding: 12px; margin: 8px 0; text-align: center;">
            <p style="margin: 0; color: #0c5460; font-weight: 500;">üéâ Todas as {total_count} chaves configuradas!</p>
        </div>
        """, unsafe_allow_html=True)
    
    return configured_count > 0


def get_api_config_for_env() -> Dict[str, str]:
    """Obt√©m configura√ß√£o de API para vari√°veis de ambiente"""
    config_manager = APIConfigManager()
    return config_manager.get_config()


# Fun√ß√£o de conveni√™ncia para usar na aplica√ß√£o principal
def setup_api_environment():
    """Configura vari√°veis de ambiente com as chaves salvas"""
    config = get_api_config_for_env()
    for key, value in config.items():
        if value:
            os.environ[key] = value
    return config
