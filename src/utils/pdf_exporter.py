"""
M√≥dulo para exporta√ß√£o de relat√≥rios em PDF
Implementa gera√ß√£o de relat√≥rios executivos em formato PDF
"""

from datetime import datetime
from typing import Dict, List, Any
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, mm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.platypus.flowables import HRFlowable
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
import io
import os

from ..models.schemas import NFe, ResultadoAnalise, ClassificacaoNCM, DeteccaoFraude


class PDFExporter:
    """
    Classe para exporta√ß√£o de relat√≥rios fiscais em PDF
    """
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Configura estilos customizados para o PDF"""
        
        # T√≠tulo principal
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Title'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.darkblue
        ))
        
        # Subt√≠tulo
        self.styles.add(ParagraphStyle(
            name='CustomHeading1',
            parent=self.styles['Heading1'],
            fontSize=16,
            spaceAfter=12,
            textColor=colors.darkblue,
            borderWidth=1,
            borderColor=colors.lightgrey,
            borderPadding=5
        ))
        
        # Cabe√ßalho de se√ß√£o
        self.styles.add(ParagraphStyle(
            name='CustomHeading2',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=8,
            textColor=colors.darkgreen
        ))
        
        # Texto normal
        self.styles.add(ParagraphStyle(
            name='CustomNormal',
            parent=self.styles['Normal'],
            fontSize=10,
            spaceAfter=6,
            alignment=TA_JUSTIFY
        ))
        
        # Texto de alerta
        self.styles.add(ParagraphStyle(
            name='Alert',
            parent=self.styles['Normal'],
            fontSize=11,
            textColor=colors.red,
            spaceAfter=6
        ))
        
        # Texto de sucesso
        self.styles.add(ParagraphStyle(
            name='Success',
            parent=self.styles['Normal'],
            fontSize=11,
            textColor=colors.green,
            spaceAfter=6
        ))
    
    def export_relatorio_executivo(self, 
                                 nfe: NFe, 
                                 classificacoes: Dict[int, ClassificacaoNCM],
                                 resultado: ResultadoAnalise,
                                 output_path: str) -> str:
        """
        Exporta relat√≥rio executivo completo em PDF
        
        Args:
            nfe: Dados da NF-e
            classificacoes: Classifica√ß√µes NCM dos itens
            resultado: Resultado da an√°lise de fraudes
            output_path: Caminho para salvar o PDF
            
        Returns:
            str: Caminho do arquivo PDF gerado
        """
        
        # Criar documento PDF
        doc = SimpleDocTemplate(
            output_path,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )
        
        # Construir conte√∫do
        story = []
        
        # Cabe√ßalho
        story.extend(self._build_header())
        
        # Resumo executivo
        story.extend(self._build_resumo_executivo(nfe, resultado))
        
        # Dados da NF-e
        story.extend(self._build_dados_nfe(nfe))
        
        # Classifica√ß√µes NCM
        story.extend(self._build_classificacoes_ncm(classificacoes))
        
        # An√°lise de fraudes
        story.extend(self._build_analise_fraudes(resultado))
        
        # Recomenda√ß√µes
        story.extend(self._build_recomendacoes(resultado))
        
        # Rodap√©
        story.extend(self._build_footer())
        
        # Gerar PDF
        doc.build(story, onFirstPage=self._add_page_number, onLaterPages=self._add_page_number)
        
        return output_path
    
    def _build_header(self) -> List:
        """Constr√≥i cabe√ßalho do relat√≥rio"""
        elements = []
        
        # T√≠tulo principal
        elements.append(Paragraph("üöÄ FiscalAI MVP", self.styles['CustomTitle']))
        elements.append(Paragraph("Sistema de An√°lise Fiscal Inteligente", self.styles['CustomHeading1']))
        elements.append(Spacer(1, 12))
        
        # Data e hora
        now = datetime.now()
        elements.append(Paragraph(f"Relat√≥rio gerado em: {now.strftime('%d/%m/%Y √†s %H:%M:%S')}", 
                                 self.styles['CustomNormal']))
        elements.append(HRFlowable(width="100%", thickness=1, lineCap='round', color=colors.grey))
        elements.append(Spacer(1, 20))
        
        return elements
    
    def _build_resumo_executivo(self, nfe: NFe, resultado: ResultadoAnalise) -> List:
        """Constr√≥i se√ß√£o de resumo executivo"""
        elements = []
        
        elements.append(Paragraph("üìä RESUMO EXECUTIVO", self.styles['CustomHeading1']))
        elements.append(Spacer(1, 12))
        
        # Score de risco
        risco_color = self._get_risco_color(resultado.nivel_risco)
        elements.append(Paragraph(f"<b>Score de Risco:</b> {resultado.score_risco_geral}/100", 
                                 self.styles['CustomNormal']))
        elements.append(Paragraph(f"<b>N√≠vel de Risco:</b> <font color='{risco_color}'>{resultado.nivel_risco.value.upper()}</font>", 
                                 self.styles['CustomNormal']))
        elements.append(Spacer(1, 8))
        
        # Status geral
        if resultado.score_risco_geral < 30:
            status_text = "‚úÖ APROVADO - Processamento pode prosseguir normalmente"
            status_style = 'Success'
        elif resultado.score_risco_geral < 60:
            status_text = "‚ö° ATEN√á√ÉO - Verificar pontos destacados"
            status_style = 'CustomNormal'
        elif resultado.score_risco_geral < 85:
            status_text = "‚ö†Ô∏è REVIS√ÉO OBRIGAT√ìRIA - An√°lise manual necess√°ria"
            status_style = 'Alert'
        else:
            status_text = "üö® BLOQUEIO IMEDIATO - Investiga√ß√£o completa necess√°ria"
            status_style = 'Alert'
        
        elements.append(Paragraph(f"<b>Status:</b> {status_text}", self.styles[status_style]))
        elements.append(Spacer(1, 12))
        
        return elements
    
    def _build_dados_nfe(self, nfe: NFe) -> List:
        """Constr√≥i se√ß√£o com dados da NF-e"""
        elements = []
        
        elements.append(Paragraph("üìÑ DADOS DA NOTA FISCAL", self.styles['CustomHeading1']))
        elements.append(Spacer(1, 12))
        
        # Tabela com dados principais
        data = [
            ['Campo', 'Valor'],
            ['N√∫mero da NF-e', nfe.numero],
            ['Chave de Acesso', nfe.chave_acesso],
            ['Data de Emiss√£o', nfe.data_emissao.strftime('%d/%m/%Y')],
            ['CNPJ Emitente', nfe.cnpj_emitente],
            ['Nome Emitente', nfe.razao_social_emitente or 'N/A'],
            ['CNPJ Destinat√°rio', nfe.cnpj_destinatario],
            ['Nome Destinat√°rio', nfe.razao_social_destinatario or 'N/A'],
            ['Valor Total', f"R$ {nfe.valor_total:,.2f}"],
            ['Quantidade de Itens', str(len(nfe.itens))]
        ]
        
        table = Table(data, colWidths=[2*inch, 4*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        elements.append(table)
        elements.append(Spacer(1, 20))
        
        return elements
    
    def _build_classificacoes_ncm(self, classificacoes: Dict[int, ClassificacaoNCM]) -> List:
        """Constr√≥i se√ß√£o de classifica√ß√µes NCM"""
        elements = []
        
        elements.append(Paragraph("üè∑Ô∏è CLASSIFICA√á√ïES NCM", self.styles['CustomHeading1']))
        elements.append(Spacer(1, 12))
        
        for item_id, classificacao in classificacoes.items():
            elements.append(Paragraph(f"<b>Item {item_id}:</b> {classificacao.descricao_produto}", 
                                     self.styles['CustomHeading2']))
            
            # Tabela de classifica√ß√£o
            data = [
                ['Aspecto', 'Valor'],
                ['NCM Declarado', classificacao.ncm_declarado],
                ['NCM Predito', classificacao.ncm_predito],
                ['Confian√ßa', f"{classificacao.confianca:.1%}"],
                ['Status', '‚úÖ Correto' if classificacao.ncm_declarado == classificacao.ncm_predito else '‚ö†Ô∏è Divergente']
            ]
            
            table = Table(data, colWidths=[2*inch, 3*inch])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            elements.append(table)
            
            # Justificativa
            if classificacao.justificativa:
                elements.append(Paragraph(f"<b>Justificativa:</b> {classificacao.justificativa}", 
                                         self.styles['CustomNormal']))
            
            elements.append(Spacer(1, 12))
        
        return elements
    
    def _build_analise_fraudes(self, resultado: ResultadoAnalise) -> List:
        """Constr√≥i se√ß√£o de an√°lise de fraudes"""
        elements = []
        
        elements.append(Paragraph("üîç AN√ÅLISE DE FRAUDES", self.styles['CustomHeading1']))
        elements.append(Spacer(1, 12))
        
        if not resultado.fraudes_detectadas:
            elements.append(Paragraph("‚úÖ Nenhuma fraude detectada!", self.styles['Success']))
            elements.append(Paragraph("A NF-e passou por todos os testes de detec√ß√£o de fraudes sem problemas identificados.", 
                                     self.styles['CustomNormal']))
        else:
            elements.append(Paragraph(f"‚ö†Ô∏è {len(resultado.fraudes_detectadas)} fraude(s) detectada(s):", 
                                     self.styles['Alert']))
            elements.append(Spacer(1, 8))
            
            for i, fraude in enumerate(resultado.fraudes_detectadas, 1):
                elements.append(Paragraph(f"<b>{i}. {fraude.tipo_fraude.value.upper()}</b>", 
                                         self.styles['CustomHeading2']))
                elements.append(Paragraph(f"<b>Score:</b> {fraude.score}/100", self.styles['CustomNormal']))
                elements.append(Paragraph(f"<b>Descri√ß√£o:</b> {fraude.descricao}", self.styles['CustomNormal']))
                
                if fraude.evidencias:
                    elements.append(Paragraph(f"<b>Evid√™ncias:</b> {fraude.evidencias}", self.styles['CustomNormal']))
                
                elements.append(Spacer(1, 8))
        
        elements.append(Spacer(1, 12))
        return elements
    
    def _build_recomendacoes(self, resultado: ResultadoAnalise) -> List:
        """Constr√≥i se√ß√£o de recomenda√ß√µes"""
        elements = []
        
        elements.append(Paragraph("üí° RECOMENDA√á√ïES", self.styles['CustomHeading1']))
        elements.append(Spacer(1, 12))
        
        # Gerar recomenda√ß√µes baseadas no n√≠vel de risco
        recomendacoes = self._gerar_recomendacoes_finais(resultado)
        
        for i, recomendacao in enumerate(recomendacoes, 1):
            elements.append(Paragraph(f"{i}. {recomendacao}", self.styles['CustomNormal']))
        
        elements.append(Spacer(1, 20))
        return elements
    
    def _build_footer(self) -> List:
        """Constr√≥i rodap√© do relat√≥rio"""
        elements = []
        
        elements.append(HRFlowable(width="100%", thickness=1, lineCap='round', color=colors.grey))
        elements.append(Spacer(1, 12))
        
        elements.append(Paragraph("‚ö†Ô∏è <b>Aviso Legal:</b> Este relat√≥rio √© gerado automaticamente pelo FiscalAI MVP. "
                                 "Para decis√µes fiscais importantes, consulte sempre um especialista fiscal qualificado.", 
                                 self.styles['CustomNormal']))
        elements.append(Paragraph("Desenvolvido com ‚ù§Ô∏è e IA - FiscalAI MVP", 
                                 self.styles['CustomNormal']))
        
        return elements
    
    def _gerar_recomendacoes_finais(self, resultado: ResultadoAnalise) -> List[str]:
        """Gera recomenda√ß√µes estrat√©gicas finais"""
        recomendacoes = []
        
        if resultado.nivel_risco == "critico":
            recomendacoes.append("üö® BLOQUEIO IMEDIATO: N√£o processar esta NF-e at√© investiga√ß√£o completa")
            recomendacoes.append("Acionar departamento jur√≠dico e compliance")
            recomendacoes.append("Considerar auditoria completa do fornecedor")
        
        elif resultado.nivel_risco == "alto":
            recomendacoes.append("‚ö†Ô∏è REVIS√ÉO OBRIGAT√ìRIA: An√°lise manual por especialista fiscal")
            recomendacoes.append("Solicitar esclarecimentos formais do fornecedor")
            recomendacoes.append("Registrar ocorr√™ncia para monitoramento futuro")
        
        elif resultado.nivel_risco == "medio":
            recomendacoes.append("‚ö° ATEN√á√ÉO: Verificar pontos destacados antes de aprovar")
            recomendacoes.append("Manter registro para an√°lise de tend√™ncias")
        
        else:
            recomendacoes.append("‚úÖ APROVADO: Processar normalmente")
            recomendacoes.append("Manter monitoramento de rotina")
        
        # Recomenda√ß√µes espec√≠ficas
        if len(resultado.fraudes_detectadas) > 0:
            tipos_fraude = set(f.tipo_fraude.value for f in resultado.fraudes_detectadas)
            if "subfaturamento" in tipos_fraude:
                recomendacoes.append("üí∞ Validar pre√ßos com pesquisa de mercado")
            if "ncm_incorreto" in tipos_fraude:
                recomendacoes.append("üìã Solicitar reclassifica√ß√£o NCM do fornecedor")
            if "triangulacao" in tipos_fraude:
                recomendacoes.append("üîÑ Investigar cadeia completa de transa√ß√µes")
        
        return recomendacoes
    
    def _get_risco_color(self, nivel_risco: str) -> str:
        """Retorna cor baseada no n√≠vel de risco"""
        cores = {
            "baixo": "green",
            "medio": "orange", 
            "alto": "red",
            "critico": "darkred"
        }
        return cores.get(nivel_risco.lower(), "black")
    
    def _add_page_number(self, canvas, doc):
        """Adiciona n√∫mero da p√°gina"""
        canvas.saveState()
        canvas.setFont('Helvetica', 9)
        page_num = canvas.getPageNumber()
        text = f"P√°gina {page_num}"
        canvas.drawRightString(200*mm, 20*mm, text)
        canvas.restoreState()


# Fun√ß√£o utilit√°ria para exporta√ß√£o r√°pida
def exportar_relatorio_pdf(nfe: NFe, 
                          classificacoes: Dict[int, ClassificacaoNCM],
                          resultado: ResultadoAnalise,
                          output_path: str = None) -> str:
    """
    Fun√ß√£o utilit√°ria para exporta√ß√£o r√°pida de relat√≥rio PDF
    
    Args:
        nfe: Dados da NF-e
        classificacoes: Classifica√ß√µes NCM
        resultado: Resultado da an√°lise
        output_path: Caminho opcional (se None, gera automaticamente)
        
    Returns:
        str: Caminho do arquivo PDF gerado
    """
    
    if output_path is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = f"relatorio_fiscal_{timestamp}.pdf"
    
    exporter = PDFExporter()
    return exporter.export_relatorio_executivo(nfe, classificacoes, resultado, output_path)
